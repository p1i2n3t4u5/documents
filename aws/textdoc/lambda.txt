1) AWS Lambda lets you run code without provisioning or managing servers. You pay only for the compute time you consume - there is no charge when your code is not running. With Lambda, you can run code for virtually any type of application or backend service - all with zero administration.

Invoke a function in response to resource lifecycle events, such as with Amazon Simple Storage Service (Amazon S3). For more information, see Using AWS Lambda with Amazon S3.

Respond to incoming HTTP requests. For more information, see Tutorial: Using Lambda with API Gateway.

Consume events from a queue. For more information, see Using Lambda with Amazon SQS.

Run a function on a schedule. For more information, see Using AWS Lambda with Amazon EventBridge (CloudWatch Events).

ec2 > existing applications to the cloud
Lambda > AWS Lambda makes it easy to execute code in response to events, such as changes to Amazon S3 buckets, 
updates to an Amazon DynamoDB table, or custom events generated by your applications or devices.

retrieve and transform data from Amazon DynamoDB
 handlers that compress or transform objects as they are uploaded to Amazon S3
reporting of API calls made to any Amazon Web Service, and server-less processing of streaming data using Amazon Kinesis.

Node.js, Python, Java, Ruby, C#, Go, and PowerShell.

AWS Lambda uses the same techniques as Amazon EC2 for isolating your code
AWS Lambda stores code in Amazon S3 and encrypts it at rest

To improve performance, AWS Lambda may choose to retain an instance of your function and reuse it to serve a subsequent request, rather than creating a new copy

You can configure each Lambda function with its own ephemeral storage between 512MB and 10,240MB, in 1MB increments. The ephemeral storage is available in each functionâ€™s /tmp directory.
Each function has access to 512MB of storage at no additional cost. 

Yes. All data stored in ephemeral storage is encrypted at rest with a key managed by AWS.

AWS CloudWatch Lambda Insight metrics to monitor your ephemeral storage usage. 

If your application needs durable, persistent storage, consider using Amazon S3 or Amazon EFS. If your application requires storing data needed by code in a single function invocation, consider using AWS Lambda ephemeral storage as a transient cache.

AWS Lambda allows you to use normal language and operating system features, such as creating additional threads and processes.

Inbound network connections are blocked by AWS Lambda, and for outbound connections, only TCP/IP and UDP/IP sockets are supported

You can also package the code (and any dependent libraries) as a ZIP and upload it using the AWS Lambda console from your local environment or specify an Amazon S3 location where the ZIP file is located. Uploads must be no larger than 50MB (compressed). You can use the AWS Eclipse plugin to author and deploy Lambda functions in Java. You can use the Visual Studio plugin to author and deploy Lambda functions in C#, and Node.js.

For sensitive information, such as database passwords, we recommend you use client-side encryption using AWS Key Management Service and store the resulting values as ciphertext in your environment variable. You will need to include logic in your AWS Lambda function code to decrypt these values.

Yes, you can package any code (frameworks, SDKs, libraries, and more) as a Lambda Layer and manage and share them easily across multiple functions.

AWS Lambda automatically integrates with Amazon CloudWatch logs, creating a log group for each Lambda function and providing basic application lifecycle event log entries, including logging the resources consumed for each use of that function. You can easily insert additional logging statements into your code. You can also call third-party logging APIs in your Lambda function.


In the AWS Lambda resource model, you choose the amount of memory you want for your function, and are allocated proportional CPU power and other resources. For example, choosing 256MB of memory allocates approximately twice as much CPU power to your Lambda function as requesting 128MB of memory and half as much CPU power as choosing 512MB of memory. To learn more, see our Function Configuration documentation.

WS Lambda functions can be configured to run up to 15 minutes per execution. You can set the timeout to any value between 1 second and 15 minutes.


each AWS Lambda function has a single, current version of the code. Clients of your Lambda function can call a specific version or get the latest implementation.